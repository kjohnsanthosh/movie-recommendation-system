{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import background from \"./assests/Movies_img.jpg\"; // ✅ Import the image\n\n// function App() {\n//   const [movieName, setMovieName] = useState(\"\");\n//   const [recommendations, setRecommendations] = useState([]);\n//   const [directorRecommendations, setDirectorRecommendations] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [directorError, setDirectorError] = useState(\"\");\n\n//   const fetchRecommendations = async () => {\n//     setError(\"\");\n//     setRecommendations([]);\n//     try {\n//       const response = await axios.post(\"http://127.0.0.1:5000/recommend_movies\", { movie_name: movieName });\n//       setRecommendations(response.data);\n//     } catch (err) {\n//       setError(\"Movie not found. Try another title.\");\n//     }\n//   };\n\n//   const fetchDirectorRecommendations = async () => {\n//     setDirectorError(\"\");\n//     setDirectorRecommendations([]);\n//     try {\n//       const response = await axios.post(\"http://127.0.0.1:5000/director_related\", { movie_name: movieName });\n//       setDirectorRecommendations(response.data);\n//     } catch (err) {\n//       setDirectorError(\"No other movies found by this director.\");\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         backgroundImage: `url(${background})`, // ✅ Set background image\n//         height: \"100vh\",\n//         backgroundSize: \"cover\",\n//         backgroundPosition: \"center\",\n//         backgroundRepeat: \"no-repeat\",\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//         textAlign: \"center\",\n//         color: \"white\", // Ensure text is visible\n//         overflow: \"hidden\", // Prevent overall page overflow\n//       }}\n//     >\n//       <h1>Movie Recommendation System</h1>\n//       <input \n//         type=\"text\" \n//         placeholder=\"Enter movie name\" \n//         value={movieName} \n//         onChange={(e) => setMovieName(e.target.value)} \n//         style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }} \n//       />\n//       <div style={{ marginTop: \"10px\" }}>\n//         <button onClick={fetchRecommendations} style={{ padding: \"10px\", margin: \"5px\" }}>Get Recommendations</button>\n//         <button onClick={fetchDirectorRecommendations} style={{ padding: \"10px\", margin: \"5px\" }}>Director Related Movies</button>\n//       </div>\n\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n//       {recommendations.length > 0 && (\n//         <div \n//           style={{\n//             maxHeight: \"300px\", \n//             overflowY: \"auto\", \n//             backgroundColor: \"rgba(0, 0, 0, 0.7)\", \n//             padding: \"10px\",\n//             borderRadius: \"10px\",\n//             width: \"80%\",\n//             marginTop: \"20px\"\n//           }}\n//         >\n//           <h2>Recommended Movies</h2>\n//           <ul>\n//             {recommendations.map((movie, index) => (\n//               <li key={index}><b>{movie.title}</b> - {movie.overview}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n\n//       {directorError && <p style={{ color: \"red\" }}>{directorError}</p>}\n\n//       {directorRecommendations.length > 0 && (\n//         <div \n//           style={{\n//             maxHeight: \"300px\", \n//             overflowY: \"auto\", \n//             backgroundColor: \"rgba(0, 0, 0, 0.7)\", \n//             padding: \"10px\",\n//             borderRadius: \"10px\",\n//             width: \"80%\",\n//             marginTop: \"20px\"\n//           }}\n//         >\n//           <h2>Movies by the Same Director</h2>\n//           <ul>\n//             {directorRecommendations.map((movie, index) => (\n//               <li key={index}><b>{movie.title}</b> - {movie.overview}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/SANTHOSH/OneDrive/Desktop/React/movies_recommendation_system/frontend/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import background from \"./assests/Movies_img.jpg\"; // ✅ Import the image\n\n// function App() {\n//   const [movieName, setMovieName] = useState(\"\");\n//   const [recommendations, setRecommendations] = useState([]);\n//   const [directorRecommendations, setDirectorRecommendations] = useState([]);\n//   const [error, setError] = useState(\"\");\n//   const [directorError, setDirectorError] = useState(\"\");\n\n//   const fetchRecommendations = async () => {\n//     setError(\"\");\n//     setRecommendations([]);\n//     try {\n//       const response = await axios.post(\"http://127.0.0.1:5000/recommend_movies\", { movie_name: movieName });\n//       setRecommendations(response.data);\n//     } catch (err) {\n//       setError(\"Movie not found. Try another title.\");\n//     }\n//   };\n\n//   const fetchDirectorRecommendations = async () => {\n//     setDirectorError(\"\");\n//     setDirectorRecommendations([]);\n//     try {\n//       const response = await axios.post(\"http://127.0.0.1:5000/director_related\", { movie_name: movieName });\n//       setDirectorRecommendations(response.data);\n//     } catch (err) {\n//       setDirectorError(\"No other movies found by this director.\");\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         backgroundImage: `url(${background})`, // ✅ Set background image\n//         height: \"100vh\",\n//         backgroundSize: \"cover\",\n//         backgroundPosition: \"center\",\n//         backgroundRepeat: \"no-repeat\",\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         alignItems: \"center\",\n//         justifyContent: \"center\",\n//         textAlign: \"center\",\n//         color: \"white\", // Ensure text is visible\n//         overflow: \"hidden\", // Prevent overall page overflow\n//       }}\n//     >\n//       <h1>Movie Recommendation System</h1>\n//       <input \n//         type=\"text\" \n//         placeholder=\"Enter movie name\" \n//         value={movieName} \n//         onChange={(e) => setMovieName(e.target.value)} \n//         style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }} \n//       />\n//       <div style={{ marginTop: \"10px\" }}>\n//         <button onClick={fetchRecommendations} style={{ padding: \"10px\", margin: \"5px\" }}>Get Recommendations</button>\n//         <button onClick={fetchDirectorRecommendations} style={{ padding: \"10px\", margin: \"5px\" }}>Director Related Movies</button>\n//       </div>\n\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n//       {recommendations.length > 0 && (\n//         <div \n//           style={{\n//             maxHeight: \"300px\", \n//             overflowY: \"auto\", \n//             backgroundColor: \"rgba(0, 0, 0, 0.7)\", \n//             padding: \"10px\",\n//             borderRadius: \"10px\",\n//             width: \"80%\",\n//             marginTop: \"20px\"\n//           }}\n//         >\n//           <h2>Recommended Movies</h2>\n//           <ul>\n//             {recommendations.map((movie, index) => (\n//               <li key={index}><b>{movie.title}</b> - {movie.overview}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n\n//       {directorError && <p style={{ color: \"red\" }}>{directorError}</p>}\n\n//       {directorRecommendations.length > 0 && (\n//         <div \n//           style={{\n//             maxHeight: \"300px\", \n//             overflowY: \"auto\", \n//             backgroundColor: \"rgba(0, 0, 0, 0.7)\", \n//             padding: \"10px\",\n//             borderRadius: \"10px\",\n//             width: \"80%\",\n//             marginTop: \"20px\"\n//           }}\n//         >\n//           <h2>Movies by the Same Director</h2>\n//           <ul>\n//             {directorRecommendations.map((movie, index) => (\n//               <li key={index}><b>{movie.title}</b> - {movie.overview}</li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}